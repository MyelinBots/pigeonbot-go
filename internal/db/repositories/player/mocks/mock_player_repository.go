// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MyelinBots/pigeonbot-go/internal/db/repositories/player (interfaces: PlayerRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_player_repository.go -package=mocks github.com/MyelinBots/pigeonbot-go/internal/db/repositories/player PlayerRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	player "github.com/MyelinBots/pigeonbot-go/internal/db/repositories/player"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
	isgomock struct{}
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// GetAllPlayers mocks base method.
func (m *MockPlayerRepository) GetAllPlayers(ctx context.Context) ([]*player.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlayers", ctx)
	ret0, _ := ret[0].([]*player.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlayers indicates an expected call of GetAllPlayers.
func (mr *MockPlayerRepositoryMockRecorder) GetAllPlayers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlayers", reflect.TypeOf((*MockPlayerRepository)(nil).GetAllPlayers), ctx)
}

// GetPlayerByID mocks base method.
func (m *MockPlayerRepository) GetPlayerByID(id string) (*player.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByID", id)
	ret0, _ := ret[0].(*player.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByID indicates an expected call of GetPlayerByID.
func (mr *MockPlayerRepositoryMockRecorder) GetPlayerByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByID", reflect.TypeOf((*MockPlayerRepository)(nil).GetPlayerByID), id)
}

// UpsertPlayer mocks base method.
func (m *MockPlayerRepository) UpsertPlayer(ctx context.Context, player *player.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPlayer", ctx, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPlayer indicates an expected call of UpsertPlayer.
func (mr *MockPlayerRepositoryMockRecorder) UpsertPlayer(ctx, player any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPlayer", reflect.TypeOf((*MockPlayerRepository)(nil).UpsertPlayer), ctx, player)
}
